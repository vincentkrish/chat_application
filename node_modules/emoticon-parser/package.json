{
  "name": "emoticon-parser",
  "version": "0.0.1",
  "description": "Emoticon parser",
  "main": "index.js",
  "scripts": {
    "test": "make test-all"
  },
  "dependencies": {},
  "devDependencies": {
    "should": "*",
    "blanket": "*",
    "travis-cov": "*",
    "coveralls": "*",
    "mocha-lcov-reporter": "*",
    "mocha": "*"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/daniran/emoticon-parser.git"
  },
  "keywords": [
    "emoticons",
    "emoticon parser",
    "parser",
    "prasers"
  ],
  "engines": {
    "node": ">= 0.8.0"
  },
  "author": {
    "name": "daniran",
    "email": "danny.ran@gmail.com"
  },
  "license": "MIT",
  "readme": "Emoticons Parser\n=======\n\n## Description\n\nThis module takes text input, and parses it for occurrences of emoticons.\n\nEmoticons can come in the form of symbols like `:)` or `:-]`, or literal emoticon names like `(wink)`, `(sad)`\n\nEach matched occurrence, is replaced with the specified HTML (see examples)\n\nIn addition, when run in a Browser, it can insert emoticon symbols to INPUT fields, in the caret (cursor) position.\n\n### Demo\n\nyou can access a simple demo at:\nhttp://emoparser.herokuapp.com/\n\n## Install\n\n```bash\n$ npm install emoticon-parser\n```\n\nOr in a browser, simply include the emo-parser file:\n\n```html\n<script src=\"emo-parser.js\"></script>\n```\n\n## Usage\n\nThis code initialize a parser instance.\n\nEach emoticon is defined by it's key.\n\nIf the emoticon contains an array of emo definitions, the text is searched for every symbol occurrence.\n\nSymbols that can be mirrored like `:-)` `(-:` are also searched for.\n\nThe `emoticon_html` is used when an emoticon is matched.\n\n```js\nvar parser = new EmoticonParser({\n    debug: true,\n    emoticons: {\n        zzz: {\n            emos: [':~']\n        }\n    },\n    emoticon_html: '<span class=\"emo-class emoticon-{EMOTICON}\" title=\"{EMOTICON}\"></span>'\n});\n```\n\nFor example:\n\nA call to\n\n```js\nparser.parseText(\"hello :( world (zzz) :~\")\n```\n\nreturns:\n\n```html\nhello <span class=\"emo-class emoticon-sad\" title=\"sad\"></span> world <span class=\"emo-class emoticon-zzz\" title=\"zzz\"></span> <span class=\"emo-class emoticon-zzz\" title=\"zzz\"></span>\n```\n\nSee more examples in the examples.js\n\n## Parser\n\nActual parsing is done by building a tree of characters during initialization.\nThe tree contains all possible symbol combinations - when running with `debug: true` you can see the tree printed to console.\n\nDepending on the emoticon symbols, it would look something like this:\n\n```\n  ├─┬ :\n  │ ├── ) #happy  :)\n  │ ├─┬ -\n  │ │ ├── ) #happy  :-)\n  │ │ ├── ] #happy  :-]\n  │ │ ├── D #LOL  :-D\n  │ │ ├── / #puzzled  :-/\n  │ │ ├── ( #sad  :-(\n  │ │ ├── [ #angry  :-[\n  │ │ ├── O #shocked  :-O\n  │ │ └── o #surprised  :-o\n  │ ├── ] #happy  :]\n  │ ├── D #LOL  :D\n  │ ├── / #puzzled  :/\n  │ ├── ( #sad  :(\n  │ ├── [ #angry  :[\n  │ ├── O #shocked  :O\n  │ └── o #surprised  :o\n  ├─┬ [\n  │ ├── : #happy  [:\n  │ └─┬ -\n  │   └── : #happy  [-:\n  ├─┬ \\\n  │ ├── : #puzzled  \\:\n  │ └─┬ -\n  │   └── : #puzzled  \\-:\n  ├─┬ )\n  │ ├── : #sad  ):\n  │ └─┬ -\n  │   └── : #sad  )-:\n  ├─┬ ]\n  │ ├── : #angry  ]:\n  │ └─┬ -\n  │   └── : #angry  ]-:\n```\n\nDuring a call to `parseText()` the input text is compared against the tree char by char, until a symbol is matched.\n\n## Tests\n\nJasmine Test Suite runs in the test folder\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/daniran/emoticon-parser/issues"
  },
  "homepage": "https://github.com/daniran/emoticon-parser",
  "_id": "emoticon-parser@0.0.1",
  "dist": {
    "shasum": "4b6dc4d69792f83e79a399796a36f2c54998b05c"
  },
  "_from": "emoticon-parser@",
  "_resolved": "https://registry.npmjs.org/emoticon-parser/-/emoticon-parser-0.0.1.tgz"
}
